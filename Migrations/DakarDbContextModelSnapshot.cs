// <auto-generated />
using System;
using DakarRally.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DakarRally.Migrations
{
    [DbContext(typeof(DakarDbContext))]
    partial class DakarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DakarRally.Models.MalfunctionStatisticModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MalfunctionType")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Time")
                        .HasColumnType("REAL");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("MalfunctionStatistics");
                });

            modelBuilder.Entity("DakarRally.Models.RaceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("DakarRally.Models.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("DistanceReached")
                        .HasColumnType("REAL");

                    b.Property<double>("FinishTime")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("ManufacturingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RaceId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("RepairTimeLeft")
                        .HasColumnType("REAL");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("VehicleSubtypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("VehicleSubtypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("DakarRally.Models.VehicleSubtypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("HeavyMalfunProbab")
                        .HasColumnType("REAL");

                    b.Property<double>("LigthMalfunProbab")
                        .HasColumnType("REAL");

                    b.Property<double>("MaxSpeed")
                        .HasColumnType("REAL");

                    b.Property<string>("SubtypeName")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleSubtypes");
                });

            modelBuilder.Entity("DakarRally.Models.VehicleTypeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("RepairLength")
                        .HasColumnType("REAL");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("DakarRally.Models.MalfunctionStatisticModel", b =>
                {
                    b.HasOne("DakarRally.Models.VehicleModel", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("DakarRally.Models.VehicleModel", b =>
                {
                    b.HasOne("DakarRally.Models.RaceModel", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.HasOne("DakarRally.Models.VehicleSubtypeModel", "VehicleSubtype")
                        .WithMany()
                        .HasForeignKey("VehicleSubtypeId");

                    b.Navigation("Race");

                    b.Navigation("VehicleSubtype");
                });

            modelBuilder.Entity("DakarRally.Models.VehicleSubtypeModel", b =>
                {
                    b.HasOne("DakarRally.Models.VehicleTypeModel", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId");

                    b.Navigation("VehicleType");
                });
#pragma warning restore 612, 618
        }
    }
}
